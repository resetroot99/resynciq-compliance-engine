generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  role      UserRole   @default(ESTIMATOR)
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  estimates Estimate[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  @@unique([email, companyId])
}

model Company {
  id               Int         @id @default(autoincrement())
  name             String
  type             CompanyType
  subscriptionTier String      @default("FREE")
  users            User[]
  estimates        Estimate[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  @@unique([name, type])
}

model Estimate {
  id               Int               @id @default(autoincrement())
  operations       Json
  parts            Json
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  companyId        Int
  company          Company           @relation(fields: [companyId], references: [id])
  status           EstimateStatus    @default(PENDING)
  complianceScore  Float?
  approvalScore    Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  complianceChecks ComplianceCheck[]
  vehicles         Vehicle[]
  photos           Photo[]
  lineItems        LineItem[]
  supplements      Supplement[]
  vehicleInfo      VehicleInfo[]
  @@index([status])
  @@index([complianceScore])
  @@index([approvalScore])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([userId, companyId])
}

model Vehicle {
  id         Int      @id @default(autoincrement())
  estimateId Int      @unique
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  make       String
  model      String
  year       Int
  vin        String?
}

model Photo {
  id         Int      @id @default(autoincrement())
  estimateId Int
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  url        String
  createdAt  DateTime @default(now())
}

model LineItem {
  id          Int      @id @default(autoincrement())
  estimateId  Int
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
}

model Supplement {
  id          Int      @id @default(autoincrement())
  estimateId  Int
  estimate    Estimate @relation(fields: [estimateId], references: [id])
  description String
  amount      Float
  createdAt   DateTime @default(now())
}

model VehicleInfo {
  id         Int      @id @default(autoincrement())
  make       String
  model      String
  year       Int
  vin        String
  estimateId Int      @unique
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ComplianceCheck {
  id         Int      @id @default(autoincrement())
  estimateId Int
  estimate   Estimate @relation(fields: [estimateId], references: [id])
  score      Float
  issues     Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([estimateId])
  @@index([score])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([createdAt])
  @@index([score, estimateId])
}

model ComplianceRule {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  severity    Severity
  parameters  Json // Rule-specific parameters
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  insurerId   Int?
  insurer     Insurer?  @relation(fields: [insurerId], references: [id])
}

model AuditLog {
    id        Int      @id @default(autoincrement())
    action    String
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    timestamp DateTime @default(now())
    details   Json?
}

model Configuration {
    id    Int    @id @default(autoincrement())
    key   String @unique
    value String
}

model RepairProcedure {
    id          Int      @id @default(autoincrement())
    estimateId  Int
    estimate    Estimate @relation(fields: [estimateId], references: [id])
    procedure   String
    source      String   // OEM, I-CAR, ASE
    details     Json
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    @@index([estimateId])
}

model NotificationPreference {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    type      String
    enabled   Boolean  @default(true)
    channel   String   // email, push, sms
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    @@unique([userId, type])
    @@index([userId, type])
    @@index([channel, enabled])
}

enum UserRole {
  ADMIN
  MANAGER
  ESTIMATOR
  AUDITOR
}

enum CompanyType {
  BODY_SHOP
  INSURANCE
  FLEET
  INDEPENDENT
}

enum EstimateStatus {
  PENDING
  APPROVED
  REJECTED
  REVIEWING
}

enum Severity {
  INFO
  WARNING
  ERROR
}
