version: '3.8'

services:
  app:
    # User-Centric: Provides a clear, professional interface for adjusters & repair shops
    build: .
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://user:password@db:5432/collision_repair
    depends_on:
      - db

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: collision_repair
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  ai-service:
    # Proactive, Not Reactive: Automatically detects and fixes errors
    build: ./ai-service
    ports:
      - "5000:5000"
    environment:
      - AI_MODEL_PATH=/models
      - AI_MODEL_VERSION=${AI_MODEL_VERSION}
      - INSURER_RULES_PATH=/rules
    volumes:
      - ./ai-models:/models
      - ./ai-cache:/cache
      - ./insurer-rules:/rules
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  rules-service:
    # Insurer-Specific Customization: Dynamically adapts to different insurer rules
    build: ./rules-service
    ports:
      - "5001:5001"
    environment:
      - RULES_UPDATE_INTERVAL=3600
      - RULES_SOURCE=dynamic
    volumes:
      - ./insurer-rules:/rules

volumes:
  postgres_data:
  redis_data: 